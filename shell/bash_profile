# -*- mode: shell-script -*-

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
# case $- in
#     *i*) ;;
#       *) return;;
# esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color)
	color_prompt=yes;
	autoload -U colors && colors
esac

if [ "$color_prompt" = yes ]; then
    # my fancy prompt
    PSAUX="\[\033[37m\]${debian_chroot:+($debian_chroot)}@\[\033[32;1m\]\H\033[0m \[\033[34;1m\w\033[0m\n"
    if [ "root" = $USER ]; then
	PS1="${PSAUX}\[\033[31;1m\]\u\[\033[0m\]\[\033[37m\]\$ "
    else
	PS1="${PSAUX}\[\033[36m\]\u\[\033[0m\]\[\033[37m\]\$ "
    fi
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host
case "$TERM" in
xterm*|rxvt*)
    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}\007"'
    ;;
*)
    ;;
esac


# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'


# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


# Editors

EDITOR="emacs -nw"
VISUAL="emacs -nw"
PAGER='less'


# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

. ~/.config/dotfiles/shell/alias


if [[ $(uname -n) == "puffin.lan" ]]; then
  # Things from OS X's .bash_profile that I don't remeber

  # Setting PATH for Python 2.7
  # The orginal version is saved in .bash_profile.pysave
  export PATH="/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}"

  # Setting PATH for SML
  export PATH="/usr/local/smlnj-110.75/bin:${PATH}"

  # # Setting PATH for Git
  # PATH="/usr/local/git/bin:${PATH}"
  # export PATH
fi

# Because of Homebrew
if [[ $(uname) == "Darwin" ]] && [[ -d /usr/local/bin ]]; then
  export PATH="/usr/local/bin:$PATH"
fi

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*


# ASDF
if [[ $(uname) != "Darwin" ]]; then
    . $HOME/Applications/asdf/asdf.sh
    . $HOME/Applications/asdf/completions/asdf.bash
else
    . "/opt/homebrew/opt/asdf/libexec/asdf.sh"
    . "/opt/homebrew/opt/asdf/etc/bash_completion.d/asdf.bash"
fi

# Load Starship https://starship.rs/
export STARSHIP_CONFIG=~/.config/dotfiles/shell/starship.toml
eval "$(starship init bash)"


source $HOME/.config/dotfiles/shell/functions/bash.sh


# Direnv https://direnv.net/
eval "$(direnv hook bash)"

# Emacs vterm Ã— shell integration
# From https://github.com/akermu/emacs-libvterm#shell-side-configuration

if [[ "$INSIDE_EMACS" = 'vterm' ]] \
       && [[ -n ${EMACS_VTERM_PATH} ]] \
       && [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh ]]; then
    source ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh
fi

vterm_printf() {
    if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ]); then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

vterm_prompt_end(){
    vterm_printf "51;A$(whoami)@$(hostname):$(pwd)"
}

PS1=$PS1'\[$(vterm_prompt_end)\]'

# Atuin https://atuin.sh/
. "$HOME/.atuin/bin/env"
